Scanner sc = new Scanner(System.in);



    // preorder
    public void preOrder(Node root) {
        //base case
        if (root == null)
            return;

        //Node
        System.out.print(root.value + " ");
        //left
        preOrder(root.left);
        //right
        preOrder(root.right);
    }

    //inorder
    public void inOrder(Node root) {
        //base case
        if (root == null)
            return;

        //left
        inOrder(root.left);

        //Node
        System.out.print(root.value + " ");

        //right
        inOrder(root.right);
    }


    // post order
    public void postOrder(Node root) {
        //base case
        if (root == null)
            return;

        //left
        postOrder(root.left);

        //right
        postOrder(root.right);

        //Node
        System.out.print(root.value + " ");
    }


    public void levelOrder(Node root) {
            Queue<Node> que = new LinkedList<>();
            que.add(root);

            //
            que.add(null);

            while (!que.isEmpty()) {

                Node front = que.remove();
                if (front == null) {
                    System.out.println();
                    //catch here
                    if (!que.isEmpty()) {
                        que.add(null);
                    }
                } else {
                    System.out.print(front.value + " ");

                    if (front.left != null)
                        que.add(front.left);

                    if (front.right != null)
                        que.add(front.right);
                }

            }
        }


     class Node {
            int value;
            Node left;
            Node right;

            public Node(int value) {
                this.value = value;
                this.left = null;
                this.right = null;
            }
        }










        public Node buildBST(Node root, int data) {
                if (root == null) {
                    Node temp = new Node(data);
                    return temp;
                }

                if (data > root.value) {
                    root.right = buildBST(root.right, data);
                } else {
                    root.left = buildBST(root.left, data);
                }
                return root;
            }

            public void createBST() {
                System.out.println("Enter data for root node");
                int data = sc.nextInt();

                while (data != -1) {
                    root = buildBST(root, data);
                    System.out.println("Enter data for node");
                    data = sc.nextInt();
                }
            }

            //delete
            public void deleteKey(int key)
            {
                root = deleteRec(root,key);
            }

            private Node deleteRec(Node root, int key) {
                if(root == null)
                    return root;

                if(key < root.value)
                    root.left = deleteRec(root.left,key);
                else if(key > root.value)
                    root.right = deleteRec(root.right,key);

                else{
                    //leaf node or a single child node
                    if(root.left==null)
                        return root.right;
                    else if (root.right==null)
                        return root.left;

                    //node with two child:get inorder successor(smallest in right subtree)
                    root.value = minValue(root.right);

                    root.right = deleteRec(root.right, root.value);
                }
                return root;
            }

            private int minValue(Node root) {
                int minVal = root.value;
                while(root.left!=null){
                    root = root.left;
                    minVal= root.value;

                }
                return minVal;
            }

            //searching
            public boolean searchKey(int key) {
                Node ans = searchRec(root,key);
                if (ans != null)
                    return true;
                else
                    return false;
            }

            public Node searchRec(Node root,int key)
            {
                if(root == null || root.value==key)
                    return root;

                if(root.value < key)
                   return  searchRec(root.right,key);
                else
                    return searchRec(root.left,key);
            }












            Node root;

                // creating a BST
                public void insertKey(int key) {
                    root = insertRec(root, key);
                }

                private Node insertRec(Node root, int key) {
                    if (root == null) {
                        root = new Node(key);
                        return root;
                    }

                    if(key < root.data){
                        root.left = insertRec(root.left,key);
                    }else{
                        root.right = insertRec(root.right,key);
                    }
                    return root;
                }
